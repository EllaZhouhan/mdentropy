# !/usr/bin/env python

import pickle
import argparse
import numpy as np
import mdtraj as md
import pandas as pd
from glob import glob
from itertools import chain

from mdentropy.utils import timing
from mdentropy.tent import DihedralTransferEntropy


def run(past, current, nbins, iter, N, method):
    R = []
    tent = DihedralTransferEntropy(nbins=nbins, method=method, threads=N)
    shuffle = False
    for i in range(iter+1):
        if i > 0:
            shuffle = True
        with timing(i):
            R.append(tent.partial_transform((past, current), shuffle=shuffle))
    T = R[0]
    if iter > 0:
        T -= np.mean(R[1:], axis=0)
    return pd.DataFrame(T - T.T, columns=tent.labels)


def parse_cmdln():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-c', '--current', dest='current',
                        help='File containing current step states.',
                        required=True)
    parser.add_argument('-p', '--past', dest='past',
                        help='File containing past step states.',
                        required=True)
    parser.add_argument('-s', '--shuffle-iter', dest='iter',
                        help='Number of shuffle iterations.',
                        default=10, type=int)
    parser.add_argument('-r', '--stride', dest='stride',
                        help='Stride to use', default=100)
    parser.add_argument('-t', '--topology',
                        dest='top', help='File containing topology.',
                        default=None)
    parser.add_argument('-b', '--n-bins', dest='nbins',
                        help='Number of bins', default=24, type=int)
    parser.add_argument('-n', '--n-threads', dest='N',
                        help='Number of threads', default=None, type=int)
    parser.add_argument('-o', '--output', dest='out',
                        help='Name of output file.', default='tent.pkl')
    parser.add_argument('-m', '--method', dest='method',
                        help='Entropy estimate method.',
                        choices=['chaowangjost', 'grassberger', 'kde'],
                        default='chaowangjost')
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    options = parse_cmdln()
    expr1, expr2 = (options.current.replace(' ', '').split(','),
                    options.past.replace(' ', '').split(','))
    f1, f2 = (list(chain(*map(glob, expr1))),
              list(chain(*map(glob, expr2))))
    current = md.load(f1, top=options.top, stride=options.stride)
    past = md.load(f2, top=options.top, stride=options.stride)
    D = run(past, current, options.nbins, options.iter, options.N,
            options.method)
    pickle.dump(D, open(options.out, 'wb'))
