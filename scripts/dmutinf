# !/usr/bin/env python

import pickle
import argparse
import numpy as np
import mdtraj as md
import pandas as pd
from glob import glob
from itertools import chain

from mdentropy.utils import Timing
from mdentropy.metrics import DihedralMutualInformation


def run(traj, nbins, iter, N, types, method):
    R = []
    mi = DihedralMutualInformation(n_bins=nbins, types=types,
                                   method=method, threads=N)

    shuffled = False
    for i in range(iter + 1):
        if i > 0:
            shuffled = True
        with Timing(i):
            R.append(mi.partial_transform(traj, shuffled=shuffled))
    M = R[0]
    if iter > 0:
        M -= np.mean(R[1:], axis=0)
    return pd.DataFrame(M, columns=mi.labels)


def parse_cmdln():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', '--input', dest='traj',
                        help='File containing trajectory.', required=True)
    parser.add_argument('-s', '--shuffle-iter', dest='iter',
                        help='Number of shuffle iterations.',
                        default=100, type=int)
    parser.add_argument('-t', '--topology', dest='top',
                        help='File containing topology.', default=None)
    parser.add_argument('-b', '--n-bins', dest='nbins',
                        help='Number of bins', default=24, type=int)
    parser.add_argument('-n', '--n-threads', dest='N',
                        help='Number of threads to be used.',
                        default=None, type=int)
    parser.add_argument('-r', '--stride', dest='stride',
                        help='Stride to use', default=1, type=int)
    parser.add_argument('-o', '--output', dest='out',
                        help='Name of output file.', default='mutinf.pkl')
    parser.add_argument('-m', '--method', dest='method',
                        help='Entropy estimate method.',
                        choices=['chaowangjost', 'grassberger', 'kde',
                                 'naive'],
                        default='symbolic')

    parser.add_argument('-d', '--dihedrals', dest='dihedrals',
                        help='Dihedral angles to analyze.',
                        nargs='+',
                        choices=['phi', 'psi', 'omega', 'chi1',
                                 'chi2', 'chi3', 'chi4'],
                        default=['phi', 'psi'])
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    options = parse_cmdln()
    expr = options.traj.replace(' ', '').split(',')
    files = list(chain(*map(glob, expr)))
    traj = md.load(files, top=options.top, stride=options.stride)
    M = run(traj, options.nbins, options.iter, options.N, options.dihedrals,
            options.method)
    pickle.dump(M, open(options.out, 'wb'))
